[default]
input_type = event

[DB-Monitor-mysql-status-variable]
mode = batch
description = Shows status variables that MySQL server maintains.
interval = */5 * * * *
index_time_mode = current
connection_type = mysql
input_type = metric
query = SELECT * FROM INFORMATION_SCHEMA.GLOBAL_STATUS

[DB-Monitor-mysql-schema-information]
mode = batch
description = Shows names of databases or tables, the data types of columns, or access privileges.
interval = */5 * * * *
index_time_mode = current
connection_type = mysql
input_type = metric
query = SELECT * FROM INFORMATION_SCHEMA.TABLES

[DB-Monitor-mysql-current-operations]
mode = batch
description = Shows operations currently being performed by the set of threads executing within the server.
interval = */5 * * * *
index_time_mode = current
connection_type = mysql
input_type = metric
query = SELECT * FROM INFORMATION_SCHEMA.PROCESSLIST

[DB-Monitor-mysql-table-information]
mode = batch
description = Shows a lot of information about each non-TEMPORARY table.
interval = */5 * * * *
index_time_mode = current
connection_type = mysql
input_type = metric
query = SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE table_schema = DATABASE();

[DB-Monitor-mysql-show-triggers]
mode = batch
description = Shows the triggers currently defined for tables in a database.
interval = */5 * * * *
index_time_mode = current
connection_type = mysql
input_type = metric
query = SELECT * FROM INFORMATION_SCHEMA.TRIGGERS

[DB-Monitor-mssql-databases-information]
mode = batch
description = Provides information about databases.
interval = */5 * * * *
index_time_mode = current
connection_type = mssql
input_type = metric
query = SELECT * FROM sys.databases

[DB-Monitor-mssql-executing-requests]
mode = batch
description = Returns information about each request that is executing in SQL Server
interval = */5 * * * *
index_time_mode = current
connection_type = mssql
input_type = metric
query = SELECT * FROM sys.dm_exec_requests

[DB-Monitor-mssql-query-optimizer-stats]
mode = batch
description = Returns detailed statistics about the operation of the SQL Server query optimizer.
interval = */5 * * * *
index_time_mode = current
connection_type = mssql
input_type = metric
query = SELECT * FROM sys.dm_exec_query_optimizer_info

[DB-Monitor-mssql-connection-information]
mode = batch
description = Returns information about the connections established to this instance of SQL Server and the details of each connection.
interval = */5 * * * *
index_time_mode = current
connection_type = mssql
input_type = metric
query = SELECT * FROM sys.dm_exec_connections

[DB-Monitor-oracle-describe-tables]
mode = batch
description = Describes all tablespaces in the database.
interval = */5 * * * *
index_time_mode = current
connection_type = oracle
input_type = metric
query = SELECT * FROM dba_tablespaces

[DB-Monitor-oracle-current-state]
mode = batch
description = This view displays the state of the current instance.
interval = */5 * * * *
index_time_mode = current
connection_type = oracle
input_type = metric
query = SELECT * FROM V$INSTANCE

[DB-Monitor-oracle-utilization-statistics]
mode = batch
description = Displays system utilization statistics from the operating system. One row is returned for each system statistic.
interval = */5 * * * *
index_time_mode = current
connection_type = oracle
input_type = metric
query = SELECT STAT_NAME, VALUE, CUMULATIVE FROM V$OSSTAT

[DB-Monitor-oracle-session-information]
mode = batch
description = Displays session information for each current session.
interval = */5 * * * *
index_time_mode = current
connection_type = oracle
query = SELECT * FROM V$SESSION

[DB-Monitor-oracle-datafile-information]
mode = batch
description = Displays datafile information from the control file.
interval = */5 * * * *
index_time_mode = current
connection_type = oracle
input_type = metric
query = SELECT * FROM V$DATAFILE

[DB-Monitor-db2-tables-size]
mode = batch
description = Returns size of the database tables.
interval = */5 * * * *
index_time_mode = current
connection_type = db2
input_type = metric
query = SELECT SUBSTR(TABSCHEMA,1,18) TABSCHEMA,SUBSTR(TABNAME,1,30) TABNAME,(DATA_OBJECT_P_SIZE + INDEX_OBJECT_P_SIZE + LONG_OBJECT_P_SIZE + LOB_OBJECT_P_SIZE + XML_OBJECT_P_SIZE) AS TOTAL_SIZE_IN_KB,(DATA_OBJECT_P_SIZE + INDEX_OBJECT_P_SIZE + LONG_OBJECT_P_SIZE + LOB_OBJECT_P_SIZE + XML_OBJECT_P_SIZE)/1024 AS TOTAL_SIZE_IN_MB, (DATA_OBJECT_P_SIZE + INDEX_OBJECT_P_SIZE + LONG_OBJECT_P_SIZE + LOB_OBJECT_P_SIZE + XML_OBJECT_P_SIZE) / (1024*1024) AS TOTAL_SIZE_IN_GB FROM SYSIBMADM.ADMINTABINFO WHERE TABSCHEMA NOT LIKE 'SYS%';

[DB-Monitor-db2-tables-information]
mode = batch
description = Retrieve size and state information for all tables.
interval = */5 * * * *
index_time_mode = current
connection_type = db2
input_type = metric
query = SELECT * FROM SYSIBMADM.ADMINTABINFO

[DB-Monitor-db2-space-takem-by-sparsely-populated-tables]
mode = batch
description = Determine the amount of physical space used by a large number of sparsely populated tables.
interval = */5 * * * *
index_time_mode = current
connection_type = db2
input_type = metric
query = SELECT TABSCHEMA, TABNAME, SUM(DATA_OBJECT_P_SIZE), SUM(INDEX_OBJECT_P_SIZE), SUM(LONG_OBJECT_P_SIZE), SUM(LOB_OBJECT_P_SIZE), SUM(XML_OBJECT_P_SIZE) FROM SYSIBMADM.ADMINTABINFO GROUP BY TABSCHEMA, TABNAME

[DB-Monitor-redshift-running-queries]
mode = batch
description = Show what queries are currently running against the database.
interval = */5 * * * *
index_time_mode = current
connection_type = redshift
input_type = metric
query = SELECT user_name, db_name, pid, query FROM stv_recents WHERE status = 'Running';

[DB-Monitor-redshift-disk-information]
mode = batch
description = Show the disk speed performance and disk utilization.
interval = */5 * * * *
index_time_mode = current
connection_type = redshift
input_type = metric
query = SELECT owner, host, diskno, used, capacity, (used-tossed)/capacity::numeric *100 AS pctused FROM stv_partitions ORDER BY owner;

[DB-Monitor-redshift-queries-with-high-cpu-time]
mode = batch
description = Show active queries with high CPU time (more the 1,000 seconds), run the following query.
interval = */5 * * * *
index_time_mode = current
connection_type = redshift
input_type = metric
query = SELECT query, cpu_time / 1000000 as cpu_seconds FROM stv_query_metrics WHERE segment = -1 and cpu_time > 1000000000 ORDER BY cpu_time;

[DB-Monitor-redshift-active-user-session]
mode = batch
description = Show information about the active user sessions.
interval = */5 * * * *
index_time_mode = current
connection_type = redshift
input_type = metric
query = SELECT * FROM stv_sessions;

[DB-Monitor-redshift-show-errors]
mode = batch
description = Shows internal processing errors generated by the Amazon Redshift database engine
interval = */5 * * * *
index_time_mode = current
connection_type = redshift
input_type = metric
query = SELECT process, errcode, linenum as line, trim(error) AS err FROM stl_error;

[DB-Monitor-postgresql-largest-databases-in-cluster]
mode = batch
description = Show the list of the largest databases in your cluster
interval = */5 * * * *
index_time_mode = current
connection_type = postgresql
input_type = metric
query = SELECT datname AS db, pg_size_pretty(pg_database_size(datname)) AS size FROM pg_database ORDER BY pg_database_size(datname) DESC;

[DB-Monitor-postgresql-largest-databases-in-cluster]
mode = batch
description = Show the list of the largest databases in your cluster
interval = */5 * * * *
index_time_mode = current
connection_type = postgresql
input_type = metric
query = SELECT datname AS db, pg_size_pretty(pg_database_size(datname)) AS size FROM pg_database ORDER BY pg_database_size(datname) DESC;

[DB-Monitor-postgresql-sequential-scans]
mode = batch
description = Number of sequential scans initiated which helps identifying tables which would benefit from an index.
interval = */5 * * * *
index_time_mode = current
connection_type = postgresql
input_type = metric
query = SELECT schemaname, relname, seq_scan, seq_tup_read, seq_tup_read / seq_scan AS avg, idx_scan FROM pg_stat_user_tables WHERE seq_scan > 0 ORDER BY seq_tup_read DESC LIMIT 15;

[DB-Monitor-postgresql-not-used-indexes]
mode = batch
description = Get indexes that werent used and takes the most space.
interval = */5 * * * *
index_time_mode = current
connection_type = postgresql
input_type = metric
query = SELECT relname, idx_scan, pg_size_pretty(pg_relation_size(indexrelid)) AS size, pg_size_pretty(sum(pg_relation_size(indexrelid)) OVER (ORDER BY idx_scan, indexrelid)) AS total_size FROM pg_stat_user_indexes ORDER BY total_size LIMIT 5;

[DB-Monitor-postgresql-all-running-connections]
mode = batch
description = Get all running connections
interval = */5 * * * *
index_time_mode = current
connection_type = postgresql
input_type = metric
query = SELECT * FROM pg_stat_activity;

[DB-Monitor-postgresql-long-running-connections]
mode = batch
description = Get all long running queries (longer than 5 minutes)
interval = */5 * * * *
index_time_mode = current
connection_type = postgresql
input_type = metric
query = SELECT pid, now() - pg_stat_activity.query_start AS duration, query, state FROM pg_stat_activity where now() - query_start > interval '5 minute' AND state != 'idle'

[DB-Monitor-informix-show-table-information]
mode = batch
description = Describes each table in the database.
interval = */5 * * * *
index_time_mode = current
connection_type = informix
input_type = metric
query = SELECT * FROM syscolumns

[DB-Monitor-informix-show-errors]
mode = batch
description = Shows errors, warnings, and informational messages.
interval = */5 * * * *
index_time_mode = current
connection_type = informix
input_type = metric
query = SELECT * FROM syserrors

[DB-Monitor-informix-show-indexes]
mode = batch
description = Shows the indexes in the database.
interval = */5 * * * *
index_time_mode = current
connection_type = informix
input_type = metric
query = SELECT * FROM sysindexes

[DB-Monitor-oracle-oracle:database]
mode = batch
description = oracle:database
interval = */1 * * * *
connection_type = oracle
input_type = metric
query = SELECT * FROM V$DATABASE

[DB-Monitor-oracle-oracle:instance]
mode = batch
description = oracle:instance
interval = */1 * * * *
connection_type = oracle
input_type = metric
query = SELECT* from v$instance cross join (select VALUE as NLS_CHARACTERSET from nls_database_parameters where parameter='NLS_CHARACTERSET') cross join (select VALUE as NLS_LANGUAGE from nls_database_parameters where parameter='NLS_LANGUAGE')  cross join (select VALUE as NLS_TERRITORY from nls_database_parameters where parameter='NLS_TERRITORY') cross join (select VALUE as NLS_SORT from nls_database_parameters where parameter='NLS_SORT')

[DB-Monitor-oracle-oracle:instance]
mode = batch
description = oracle:instance
interval = */1 * * * *
connection_type = oracle
input_type = metric
query = SELECT* from v$instance cross join (select VALUE as NLS_CHARACTERSET from nls_database_parameters where parameter='NLS_CHARACTERSET') cross join (select VALUE as NLS_LANGUAGE from nls_database_parameters where parameter='NLS_LANGUAGE')  cross join (select VALUE as NLS_TERRITORY from nls_database_parameters where parameter='NLS_TERRITORY') cross join (select VALUE as NLS_SORT from nls_database_parameters where parameter='NLS_SORT')

[DB-Monitor-oracle-oracle:session]
mode = batch
description = oracle:session
interval = */2 * * * *
connection_type = oracle
input_type = metric
query = SELECT * FROM V$SESSION cross join (select instance_name, host_name from v$instance)

[DB-Monitor-oracle-oracle:tablespace]
mode = batch
description = oracle:tablespace
interval = */5 * * * *
connection_type = oracle
input_type = metric
query = SELECT * FROM DBA_TABLESPACES cross join (select instance_name, host_name from v$instance)

[DB-Monitor-oracle-oracle:tablespaceMetrics]
mode = batch
description = oracle:tablespaceMetrics
interval = */3 * * * *
connection_type = oracle
input_type = metric
query = SELECT TABLESPACE_NAME, TOTAL_BYTES, TOTAL_BLOCKS, FREE_BYTES, USED_BYTES FROM (SELECT D.TABLESPACE_NAME, TOTAL_BYTES, TOTAL_BLOCKS,FREE_BYTES, TOTAL_BYTES - NVL(FREE_BYTES, 0) "USED_BYTES" FROM (SELECT TABLESPACE_NAME, SUM (BYTES) TOTAL_BYTES, SUM (BLOCKS) TOTAL_BLOCKS FROM DBA_DATA_FILES GROUP BY TABLESPACE_NAME) D, (SELECT TABLESPACE_NAME, SUM (BYTES) FREE_BYTES FROM DBA_FREE_SPACE GROUP BY TABLESPACE_NAME) F WHERE D.TABLESPACE_NAME = F.TABLESPACE_NAME(+) UNION ALL SELECT D.TABLESPACE_NAME, TOTAL_BYTES, TOTAL_BLOCKS,NVL(FREE_BYTES, 0) "FREE_BYTES", USED_BYTES FROM (SELECT TABLESPACE_NAME, SUM(BYTES) TOTAL_BYTES, SUM(BLOCKS) TOTAL_BLOCKS FROM DBA_TEMP_FILES GROUP BY TABLESPACE_NAME) D,  (SELECT TABLESPACE_NAME, SUM(BYTES_USED) USED_BYTES, SUM(BYTES_FREE) FREE_BYTES FROM V$TEMP_SPACE_HEADER GROUP BY TABLESPACE_NAME) F WHERE D.TABLESPACE_NAME = F.TABLESPACE_NAME(+))

[DB-Monitor-oracle-oracle:sga]
mode = batch
description = oracle:sga
interval = */5 * * * *
connection_type = oracle
input_type = metric
query = SELECT NAME, TOTAL, FREE  FROM (  SELECT 'SGA' NAME, (SELECT SUM(VALUE) FROM V$SGA) TOTAL,  (SELECT SUM(BYTES) FROM V$SGASTAT WHERE NAME = 'free memory') FREE  FROM DUAL  ) UNION  SELECT NAME, TOTAL, TOTAL - USED FREE  FROM ( SELECT 'PGA' NAME,  (SELECT VALUE FROM V$PGASTAT WHERE NAME = 'aggregate PGA target parameter') TOTAL,  (SELECT VALUE FROM V$PGASTAT WHERE NAME = 'total PGA allocated') USED FROM DUAL  )  UNION  SELECT NAME, TOTAL, FREE  FROM ( SELECT 'Shared pool' NAME,  (SELECT SUM(BYTES) FROM V$SGASTAT WHERE POOL = 'shared pool' GROUP BY POOL) TOTAL,  (SELECT BYTES FROM V$SGASTAT WHERE NAME = 'free memory' and POOL = 'shared pool') FREE  FROM DUAL  ) UNION  SELECT NAME, TOTAL, FREE  FROM (  SELECT 'Large pool' NAME,  (SELECT SUM(BYTES) FROM V$SGASTAT WHERE POOL = 'large pool' GROUP BY POOL) TOTAL,  (SELECT BYTES FROM V$SGASTAT WHERE POOL = 'large pool' AND NAME = 'free memory') FREE  FROM DUAL  )

[DB-Monitor-oracle-oracle:libraryCachePerf]
mode = batch
description = oracle:libraryCachePerf
interval = */1 * * * *
connection_type = oracle
input_type = metric
query = SELECT NAMESPACE, GETS, GETHITS, GETHITRATIO, PINS, PINHITS, PINHITRATIO, RELOADS, INVALIDATIONS, DLM_LOCK_REQUESTS, DLM_PIN_REQUESTS, DLM_PIN_RELEASES, DLM_INVALIDATION_REQUESTS, DLM_INVALIDATIONS FROM V$LIBRARYCACHE

[DB-Monitor-oracle-oracle:dbFileIoPerf]
mode = batch
description = oracle:dbFileIoPerf
interval = */2 * * * *
connection_type = oracle
input_type = metric
query = SELECT 'DB_FILE' TYPE, D.NAME FILE_NAME, F.PHYRDS, F.PHYWRTS, F.AVGIOTIM,  F.MINIOTIM, F.MAXIOWTM, F.MAXIORTM, D.STATUS, HOST_NAME, INSTANCE_NAME FROM V$FILESTAT F, V$DATAFILE D cross join (select instance_name, host_name from v$instance) WHERE F.FILE# = D.FILE#  UNION  SELECT 'TEMP_DB_FILE' TYPE, T.NAME FILE_NAME,  F.PHYRDS, F.PHYWRTS, F.AVGIOTIM, F.MINIOTIM, F.MAXIOWTM, F.MAXIORTM, "STATUS", HOST_NAME, INSTANCE_NAME  FROM V$FILESTAT F, V$TEMPFILE T cross join (select instance_name, host_name from v$instance) WHERE F.FILE# = T.FILE#

[DB-Monitor-oracle-oracle:osPerf]
mode = batch
description = oracle:osPerf
interval = */5 * * * *
connection_type = oracle
input_type = metric
query = SELECT STAT_NAME, VALUE, CUMULATIVE FROM V$OSSTAT

[DB-Monitor-oracle-oracle:sysPerf]
mode = batch
description = oracle:sysPerf
interval = */1 * * * *
connection_type = oracle
input_type = metric
query = SELECT * FROM (SELECT * FROM V$SYSMETRIC_HISTORY cross join (select instance_name, HOST_NAME from v$instance)) t WHERE END_TIME > sysdate - interval '1' minute ORDER BY END_TIME ASC

[DB-Monitor-oracle-oracle:connections]
mode = batch
description = oracle:connections
interval = */5 * * * *
connection_type = oracle
input_type = metric
query = SELECT instance_name, HOST_NAME, connections from v$instance cross join (select count(*) as connections from v$session where username is not null)

[DB-Monitor-oracle-oracle:connections:pool]
mode = batch
description = oracle:connections:pool
interval = */5 * * * *
connection_type = oracle
input_type = metric
query = SELECT host_name, instance_name, active_pooled_connections, total_pooled_connections from v$instance cross join  (select count(case when status='active' then 1 end) active_pooled_connections, count(*) total_pooled_connections from DBA_CPOOL_INFO)

[DB-Monitor-oracle-oracle:database:size]
mode = batch
description = oracle:database:size
interval = */5 * * * *
connection_type = oracle
input_type = metric
query = SELECT HOST_NAME, instance_name,current_size from v$instance cross join (select round((sum(bytes)/1024/1024),2) as current_size from v$datafile)

[DB-Monitor-oracle-oracle:table]
mode = batch
description = oracle:table
interval = */5 * * * *
connection_type = oracle
input_type = metric
query = SELECT host_name, instance_name,all_tables.*, dba_segments.bytes, All_TAB_MODIFICATIONS.timestamp as last_update_time from all_tables left join All_TAB_MODIFICATIONS on all_tables.table_name=All_TAB_MODIFICATIONS.table_name left join dba_segments on dba_segments.segment_name=all_tables.table_name  cross join (select host_name, instance_name from v$instance) where dba_segments.segment_type='TABLE'

[DB-Monitor-oracle-oracle:user]
mode = batch
description = oracle:user
interval = */15 * * * *
connection_type = oracle
input_type = metric
query = SELECT * FROM ALL_USERS cross join (select host_name, instance_name from v$instance)

[DB-Monitor-oracle-oracle:audit:unified]
mode = batch
description = oracle:audit:unified
interval = */5 * * * *
connection_type = oracle
input_type = metric
query = SELECT * FROM (SELECT CAST((event_timestamp at TIME zone 'UTC') AS TIMESTAMP) event_timestamp_utc,u.* FROM UNIFIED_AUDIT_TRAIL u) t WHERE SCN > ? ORDER BY SCN ASC

[DB-Monitor-oracle-oracle:job:status]
mode = batch
description = oracle:job:status
interval = */5 * * * *
connection_type = oracle
input_type = metric
query = SELECT host_name, instance_name, JOB, WHAT, SCHEMA_USER, LAST_DATE, NEXT_DATE, BROKEN, FAILURES FROM dba_jobs cross join (select instance_name, host_name from v$instance) WHERE LAST_DATE > sysdate - interval '5' minute

[DB-Monitor-oracle-oracle:opencursors]
mode = batch
description = oracle:opencursors
interval = */2 * * * *
connection_type = oracle
input_type = metric
query = select host_name, instance_name, 'Open_Cursors',max(a.value) as highest_open_cur, p.value as max_open_cur,round((max(a.value)*100)/p.value,0) as open_cursors_percent from v$sesstat a, v$statname b, v$parameter p, v$instance where a.statistic# = b.statistic# and b.name = 'opened cursors current' and p.name= 'open_cursors' group by host_name, instance_name, p.value

[DB-Monitor-oracle-oracle:processes:sessions]
mode = batch
description = oracle:processes:sessions
interval = */2 * * * *
connection_type = oracle
input_type = metric
query = SELECT host_name, instance_name, resource_name, current_utilization, initial_allocation, max_utilization, limit_value FROM v$resource_limit cross join (select host_name, instance_name from v$instance) WHERE resource_name IN ('processes','sessions')

[DB-Monitor-oracle-oracle:backup:status]
mode = batch
description = oracle:backup:status
interval = */60 * * * *
connection_type = oracle
input_type = metric
query = SELECT SESSION_KEY, INPUT_TYPE AS BACKUP_TYPE, STATUS, TO_CHAR(START_TIME, 'mm/dd/yy hh24:mi') START_TIME, TO_CHAR(END_TIME,'mm/dd/yy hh24:mi') END_TIME, elapsed_seconds/3600 HRS FROM V$RMAN_BACKUP_JOB_DETAILS WHERE END_TIME > sysdate - interval '60' minute  ORDER BY session_key desc

[DB-Monitor-oracle-oracle:sessions:blocked]
mode = batch
description = oracle:sessions:blocked
interval = */1 * * * *
connection_type = oracle
input_type = metric
query = SELECT s.SID,s.serial#,s.username,s.client_info,s.program, s.status, S.MODULE ,s.terminal, s.osuser,w.event, w.wait_class , w.state, a.sql_text FROM gv$session s, gv$sqlarea a, gv$process p , gv$session_wait w , gv$instance a WHERE s.PREV_HASH_VALUE = a.hash_value AND s.PREV_SQL_ADDR = a.address AND s.paddr = p.addr AND s.sid=w.sid AND s.sid IN (SELECT holding_session FROM dba_blockers)

[DB-Monitor-oracle-oracle:longrunningtransactions]
mode = batch
description = oracle:longrunningtransactions
interval = */15 * * * *
connection_type = oracle
input_type = metric
query = SELECT A.SID, SUBSTR(B.USERNAME,1,10) USERNAME, SUBSTR(B.OSUSER,1,10) OSUSER, TO_CHAR(A.START_TIME, 'DD-MON:HH24:MI:SS') START_TIME, TO_CHAR(SYSDATE, 'DD-MON:HH24:MI:SS') CURR_TIME, A.OPNAME, A.TARGET, A.TOTALWORK, A.SOFAR,(A.ELAPSED_SECONDS)/60 ELAPSED_MIN, A.TIME_REMAINING/60 REMAINING_MIN, ROUND(SOFAR/TOTALWORK*100,2) AS PERCENT_COMPLETE FROM V$SESSION_LONGOPS A, V$SESSION B WHERE A.TOTALWORK <> A.SOFAR AND A.TOTALWORK != 0 AND A.SID = B.SID

[DB-Monitor-oracle-oracle:processes:waiting]
mode = batch
description = oracle:processes:waiting
interval = */15 * * * *
connection_type = oracle
input_type = metric
query = SELECT s.SID, s.serial#, s.username, s.client_info, s.program, s.status, s.MODULE, s.terminal, s.osuser,w.event, w.wait_class, w.state, sa.sql_text FROM gv$session s, gv$sqlarea sa, gv$process p, gv$session_wait w WHERE s.PREV_HASH_VALUE = sa.hash_value AND s.PREV_SQL_ADDR = sa.address AND s.paddr = p.addr AND s.sid=w.sid AND s.sid IN (SELECT waiting_session FROM dba_waiters)

[DB-Monitor-oracle-oracle:topsessions]
mode = batch
description = oracle:topsessions
interval = */60 * * * *
connection_type = oracle
input_type = metric
query = SELECT TO_CHAR(SAMPLE_TIME, 'DD-MM-YYYY HH24:MI:SS') AS SAMPLE_TIME, ROUND(OTHER/60, 3) AS OTHER, ROUND(CLUST/60, 3) AS CLUST, ROUND(QUEUEING/60, 3) AS QUEUEING, ROUND(NETWORK/60, 3) AS NETWORK, ROUND(ADMINISTRATIVE/60, 3) AS ADMINISTRATIVE, ROUND(CONFIGURATION/60, 3) AS CONFIGURATION, ROUND(COMMIT/60, 3) AS COMMIT, ROUND(APPLICATION/60, 3) AS APPLICATION, ROUND(CONCURRENCY/60, 3) AS CONCURRENCY, ROUND(SIO/60, 3) AS SYSTEM_IO, ROUND(UIO/60, 3) AS USER_IO, ROUND(SCHEDULER/60, 3) AS SCHEDULER, ROUND(CPU/ 60, 3) AS CPU, ROUND(BCPU/60, 3) AS BACKGROUND_CPU FROM (SELECT TRUNC(SAMPLE_TIME, 'MI') AS SAMPLE_TIME, DECODE(SESSION_STATE, 'ON CPU', DECODE(SESSION_TYPE, 'BACKGROUND', 'BCPU', 'ON CPU'), WAIT_CLASS) AS WAIT_CLASS FROM V$ACTIVE_SESSION_HISTORY WHERE SAMPLE_TIME > SYSDATE - INTERVAL '60' MINUTE AND SAMPLE_TIME <= TRUNC(SYSDATE, 'MI')) ASH PIVOT(COUNT(*) FOR WAIT_CLASS IN('ON CPU' AS CPU,'BCPU' AS BCPU, 'Scheduler' AS SCHEDULER, 'User I/O' AS UIO, 'System I/O' AS SIO, 'Concurrency' AS CONCURRENCY, 'Application' AS APPLICATION, 'Commit' AS COMMIT, 'Configuration' AS CONFIGURATION, 'Administrative' AS ADMINISTRATIVE, 'Network' AS NETWORK, 'Queueing' AS QUEUEING, 'Cluster' AS CLUST, 'Other' AS OTHER))

[DB-Monitor-oracle-oracle:table:stats]
mode = batch
description = oracle:table:stats
interval = */15 * * * *
connection_type = oracle
input_type = metric
query = SELECT owner, table_name, partition_name, subpartition_name, stats_update_time FROM dba_tab_stats_history WHERE stats_update_time > SYSDATE - INTERVAL '15' MINUTE ORDER BY stats_update_time ASC

[DB-Monitor-oracle-oracle:sessions:blockers]
mode = batch
description = oracle:sessions:blockers
interval = */2 * * * *
connection_type = oracle
input_type = metric
query = SELECT blocker_sid, sid, wait_event, wait_event_text, wait_id FROM v$session_blockers

[DB-Monitor-oracle-oracle:recoveryareausage]
mode = batch
description = oracle:recoveryareausage
interval = */60 * * * *
connection_type = oracle
input_type = metric
query = SELECT ROUND((A.SPACE_LIMIT / 1024 / 1024 / 1024), 2) AS FLASH_IN_GB, ROUND((A.SPACE_USED / 1024 / 1024 / 1024), 2) AS FLASH_USED_IN_GB, ROUND((A.SPACE_RECLAIMABLE / 1024 / 1024 / 1024), 2) AS FLASH_RECLAIMABLE_GB, SUM(B.PERCENT_SPACE_USED) AS PERCENT_OF_SPACE_USED FROM V$RECOVERY_FILE_DEST A, V$FLASH_RECOVERY_AREA_USAGE B GROUP BY SPACE_LIMIT, SPACE_USED, SPACE_RECLAIMABLE

[DB-Monitor-oracle-oracle:tablespaceusage]
mode = batch
description = oracle:tablespaceusage
interval = */1 * * * *
connection_type = oracle
input_type = metric
query = select host_name, instance_name, tablespace_name, used_space, tablespace_size, round(used_percent,2) as tablespace_used_percent from dba_tablespace_usage_metrics cross join (select host_name, instance_name from v$instance)

[DB-Monitor-oracle-oracle:asm_diskgroup]
mode = batch
description = oracle:asm_diskgroup
interval = */5 * * * *
connection_type = oracle
input_type = metric
query = SELECT host_name, instance_name, name asm_disk_group, round(total_mb/1024) TOTAL_GB , round(free_mb/1024) free_gb ,  round((total_mb - free_mb) / 1024) used_gb ,  round((1- (free_mb / total_mb))*100, 2) asm_disk_group_used_percent from v$asm_diskgroup  cross join (select instance_name, host_name from v$instance)

[DB-Monitor-oracle-oracle:recoveryfiledestination]
mode = batch
description = oracle:recoveryfiledestination
interval = */5 * * * *
connection_type = oracle
input_type = metric
query = SELECT host_name, instance_name, NAME FRA_NAME, SPACE_USED, SPACE_LIMIT, ROUND(SPACE_USED/SPACE_LIMIT * 100, 2) AS FRA_USED_PERCENT FROM V$RECOVERY_FILE_DEST cross join (select instance_name, host_name from v$instance)

[DB-Monitor-oracle-oracle:cluster]
mode = batch
description = oracle:cluster
interval = */2 * * * *
connection_type = oracle
input_type = metric
query = SELECT HOST_NAME, INSTANCE_NAME, INSTANCE_ROLE, STATUS, LOGINS, DATABASE_STATUS FROM gv$instance  ORDER BY DATABASE_STATUS DESC

[DB-Monitor-oracle-oracle:archiveshipping:status]
mode = batch
description = oracle:archiveshipping:status
interval = */2 * * * *
connection_type = oracle
input_type = metric
query = SELECT 'Archived_Files_Shipping',  APPLIED_TIME, (case when ((APPLIED_TIME is not null and (LOG_ARCHIVED-LOG_APPLIED) is null) or (APPLIED_TIME is null and (LOG_ARCHIVED-LOG_APPLIED) is not null) or ((LOG_ARCHIVED-LOG_APPLIED) > 1)) then 'Archive Gap is ' else 'OK!' end) Status,  LOG_ARCHIVED-LOG_APPLIED LOG_GAP,HOST_NAME, INSTANCE_NAME FROM (SELECT A.INSTANCE_NAME DB_NAME FROM GV$INSTANCE A,V$DATABASE B WHERE upper(A.INSTANCE_NAME)=upper(B.NAME) AND B.DATABASE_ROLE='PRIMARY' AND A.INST_ID=1), (SELECT MAX(SEQUENCE#)-1 LOG_ARCHIVED FROM V$ARCHIVED_LOG WHERE ARCHIVED='YES' and THREAD#=1 AND  resetlogs_change# in (select resetlogs_change# from v$database)), (SELECT MAX(SEQUENCE#) LOG_APPLIED FROM V$ARCHIVED_LOG WHERE APPLIED='YES' and THREAD#=1 AND resetlogs_change# in (select resetlogs_change# from v$database)), (SELECT CAST(MAX(COMPLETION_TIME) AS TIMESTAMP) at time zone 'UTC' APPLIED_TIME FROM V$ARCHIVED_LOG WHERE APPLIED='YES' and THREAD#=1 AND resetlogs_change# in (select resetlogs_change# from v$database)) cross join (select instance_name, host_name from v$instance) UNION SELECT 'Archived_Files_Shipping', APPLIED_TIME, (case when ((APPLIED_TIME is not null and (LOG_ARCHIVED-LOG_APPLIED) is null) or (APPLIED_TIME is null and (LOG_ARCHIVED-LOG_APPLIED) is not null) or ((LOG_ARCHIVED-LOG_APPLIED) > 1)) then 'Archive Gap is ' else 'OK!' end) Status, LOG_ARCHIVED-LOG_APPLIED LOG_GAP,HOST_NAME, INSTANCE_NAME from (SELECT A.INSTANCE_NAME DB_NAME FROM GV$INSTANCE A,V$DATABASE B WHERE upper(A.INSTANCE_NAME)=upper(B.NAME) AND B.DATABASE_ROLE='PRIMARY' AND A.INST_ID=2 ), (SELECT MAX(SEQUENCE#)-1 LOG_ARCHIVED FROM V$ARCHIVED_LOG WHERE ARCHIVED='YES' and THREAD#=2 AND resetlogs_change# in (select resetlogs_change# from v$database)), (SELECT MAX(SEQUENCE#) LOG_APPLIED FROM V$ARCHIVED_LOG WHERE APPLIED='YES' AND THREAD#=2 AND resetlogs_change# in (select resetlogs_change# from v$database)), (SELECT CAST(MAX(COMPLETION_TIME) AS TIMESTAMP) at time zone 'UTC' APPLIED_TIME FROM V$ARCHIVED_LOG WHERE APPLIED='YES' AND THREAD#=2 AND resetlogs_change# in (select resetlogs_change# from v$database)) cross join (select instance_name, host_name from v$instance)

[DB-Monitor-oracle-oracle:dataguard:errors]
mode = batch
description = oracle:dataguard:errors
interval = */2 * * * *
connection_type = oracle
input_type = metric
query = select i.host_name, i.instance_name, a.dest_name, count(*) num_of_errors FROM V$ARCHIVE_DEST a, v$instance i where a.status ='VALID' and a.valid_now <> 'YES' group by i.host_name, i.instance_name, a.dest_name

[DB-Monitor-oracle-oracle:observer:status]
mode = batch
description = oracle:observer:status
interval = */2 * * * *
connection_type = oracle
input_type = metric
query = select host_name, instance_name, NVL(FS_FAILOVER_OBSERVER_PRESENT,'NO') "OBSERVER_PRESENT" from V$DATABASE cross join (select host_name, instance_name from v$instance)

[DB-Monitor-mssql-mssql:instance]
mode = batch
description = mssql:instance
interval = */1 * * * *
connection_type = mssql
input_type = metric
query = SELECT CONVERT(varchar(128),SERVERPROPERTY('ProductVersion')) AS ProductVersion, CONVERT(varchar(128),SERVERPROPERTY('ProductLevel')) AS ProductLevel, CONVERT(varchar(128),SERVERPROPERTY('Edition')) AS Edition, CONVERT(varchar(128),SERVERPROPERTY('EngineEdition')) AS EngineEdition, db_name() AS DatabaseName, CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, CONVERT(varchar(128),SERVERPROPERTY('SqlCharSetName')) AS SqlCharSetName, CONVERT(varchar(128),SERVERPROPERTY('Collation')) AS Collation, CONVERT(varchar(128),@@MAX_CONNECTIONS) AS MaxConnections

[DB-Monitor-mssql-mssql:lastlogbackup]
mode = batch
description = mssql:lastlogbackup
interval = */60 * * * *
connection_type = mssql
input_type = metric
query = SELECT xx.name AS Database_Name, MaxDate AS Hours_Since_Backup FROM (SELECT database_name, DATEDIFF(HOUR,MAX(backup_finish_date), GETDATE()) AS MaxDate FROM msdb.dbo.backupset WHERE TYPE IN ('L') GROUP BY database_name) x RIGHT OUTER JOIN (SELECT name FROM master.sys.databases y WHERE recovery_model <> 3 AND name NOT IN ('model') GROUP BY name) xx ON x.database_name = xx.name

[DB-Monitor-mssqltrc-mssql:trclog]
mode = batch
description = mssql:trclog
interval = */1 * * * *
connection_type = mssql
input_type = metric
query = SELECT * FROM fn_trace_gettable('C:\\\\Program Files\\\\Microsoft SQL Server\\\\MSSQL11.MSSQLSERVER\\\\MSSQL\\\\Log\\\\log.trc',default) WHERE StartTime > DATEDIFF(mi,getdate()-1,getdate()) ORDER BY StartTime ASC

[DB-Monitor-mssql-mssql:processes]
mode = batch
description = mssql:processes
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT a.*, b.name,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.sysprocesses a JOIN sys.databases b ON a.dbid = b.database_id

[DB-Monitor-mssql-mssql:databases]
mode = batch
description = mssql:databases
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.databases

[DB-Monitor-mssql-mssql:instancestats]
mode = batch
description = mssql:instancestats
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT @@TOTAL_READ as total_reads,@@TOTAL_WRITE as total_writes,@@TOTAL_ERRORS as total_errors,COUNT(session_id) as total_sessions, COUNT(DISTINCT login_name) as total_users,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_exec_sessions

[DB-Monitor-mssqlao-mssql:alwayson:dm_hadr_auto_page_repair]
mode = batch
description = mssql:alwayson:dm_hadr_auto_page_repair
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_hadr_auto_page_repair

[DB-Monitor-mssqlao-mssql:alwayson:dm_hadr_availability_group_states]
mode = batch
description = mssql:alwayson:dm_hadr_availability_group_states
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_hadr_availability_group_states

[DB-Monitor-mssqlao-mssql:alwayson:dm_hadr_availability_replica_cluster_nodes]
mode = batch
description = mssql:alwayson:dm_hadr_availability_replica_cluster_nodes
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_hadr_availability_replica_cluster_nodes

[DB-Monitor-mssqlao-mssql:alwayson:dm_hadr_availability_replica_cluster_states]
mode = batch
description = mssql:alwayson:dm_hadr_availability_replica_cluster_states
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_hadr_availability_replica_cluster_states

[DB-Monitor-mssqlao-mssql:alwayson:dm_hadr_availability_replica_states]
mode = batch
description = mssql:alwayson:dm_hadr_availability_replica_states
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_hadr_availability_replica_states

[DB-Monitor-mssqlao-mssql:alwayson:dm_hadr_cluster]
mode = batch
description = mssql:alwayson:dm_hadr_cluster
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_hadr_cluster

[DB-Monitor-mssqlao-mssql:alwayson:dm_hadr_cluster_members]
mode = batch
description = mssql:alwayson:dm_hadr_cluster_members
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_hadr_cluster_members

[DB-Monitor-mssqlao-mssql:alwayson:dm_hadr_cluster_networks]
mode = batch
description = mssql:alwayson:dm_hadr_cluster_networks
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_hadr_cluster_networks

[DB-Monitor-mssqlao-mssql:alwayson:dm_hadr_database_replica_cluster_states]
mode = batch
description = mssql:alwayson:dm_hadr_database_replica_cluster_states
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_hadr_database_replica_cluster_states

[DB-Monitor-mssqlao-mssql:alwayson:dm_hadr_database_replica_states]
mode = batch
description = mssql:alwayson:dm_hadr_database_replica_states
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_hadr_database_replica_states

[DB-Monitor-mssqlao-mssql:alwayson:dm_hadr_instance_node_map]
mode = batch
description = mssql:alwayson:dm_hadr_instance_node_map
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_hadr_instance_node_map

[DB-Monitor-mssqlao-mssql:alwayson:dm_hadr_name_id_map]
mode = batch
description = mssql:alwayson:dm_hadr_name_id_map
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_hadr_name_id_map

[DB-Monitor-mssqlao-mssql:alwayson:dm_tcp_listener_states]
mode = batch
description = mssql:alwayson:dm_tcp_listener_states
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_tcp_listener_states

[DB-Monitor-mssql-mssql:database:dm_db_file_space_usage]
mode = batch
description = mssql:database:dm_db_file_space_usage
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_db_file_space_usage

[DB-Monitor-mssql-mssql:database:dm_db_partition_stats]
mode = batch
description = mssql:database:dm_db_partition_stats
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_db_partition_stats

[DB-Monitor-mssql-mssql:database:dm_db_session_space_usage]
mode = batch
description = mssql:database:dm_db_session_space_usage
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_db_session_space_usage

[DB-Monitor-mssql-mssql:database:dm_db_uncontained_entities]
mode = batch
description = mssql:database:dm_db_uncontained_entities
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_db_uncontained_entities

[DB-Monitor-mssql-mssql:database:dm_db_fts_index_physical_stats]
mode = batch
description = mssql:database:dm_db_fts_index_physical_stats
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_db_fts_index_physical_stats

[DB-Monitor-mssql-mssql:database:dm_db_persisted_sku_features]
mode = batch
description = mssql:database:dm_db_persisted_sku_features
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_db_persisted_sku_features

[DB-Monitor-mssql-mssql:database:dm_db_task_space_usage]
mode = batch
description = mssql:database:dm_db_task_space_usage
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_db_task_space_usage

[DB-Monitor-mssql-mssql:execution:dm_exec_background_job_queue]
mode = batch
description = mssql:execution:dm_exec_background_job_queue
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_exec_background_job_queue

[DB-Monitor-mssql-mssql:execution:dm_exec_background_job_queue_stats]
mode = batch
description = mssql:execution:dm_exec_background_job_queue_stats
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_exec_background_job_queue_stats

[DB-Monitor-mssql-mssql:execution:dm_exec_cached_plans]
mode = batch
description = mssql:execution:dm_exec_cached_plans
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_exec_cached_plans

[DB-Monitor-mssql-mssql:execution:dm_exec_connections]
mode = batch
description = mssql:execution:dm_exec_connections
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_exec_connections

[DB-Monitor-mssql-mssql:execution:dm_exec_procedure_stats]
mode = batch
description = mssql:execution:dm_exec_procedure_stats
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_exec_procedure_stats

[DB-Monitor-mssql-mssql:execution:dm_exec_query_memory_grants]
mode = batch
description = mssql:execution:dm_exec_query_memory_grants
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_exec_query_memory_grants

[DB-Monitor-mssql-mssql:execution:dm_exec_query_optimizer_info]
mode = batch
description = mssql:execution:dm_exec_query_optimizer_info
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_exec_query_optimizer_info

[DB-Monitor-mssql-mssql:execution:dm_exec_query_resource_semaphores]
mode = batch
description = mssql:execution:dm_exec_query_resource_semaphores
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_exec_query_resource_semaphores

[DB-Monitor-mssql-mssql:execution:dm_exec_query_stats]
mode = batch
description = mssql:execution:dm_exec_query_stats
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT PRO.loginame AS LoginName, DB.name AS DatabaseName, CONVERT(varchar(max),PRO.sql_handle,1) AS sql_handle, PRO.[status] as ProcessStatus, PRO.cmd AS Command, PRO.last_batch AS LastBatch, PRO.cpu AS Cpu, PRO.physical_io AS PhysicalIo, STM.[text] AS SQLStatement, CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName FROM sys.sysprocesses AS PRO INNER JOIN sys.databases AS DB ON PRO.dbid = DB.database_id CROSS APPLY sys.dm_exec_sql_text(PRO.sql_handle) AS STM WHERE PRO.spid >= 50

[DB-Monitor-mssql-mssql:execution:dm_exec_requests]
mode = batch
description = mssql:execution:dm_exec_requests
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT session_id,request_id,start_time,status,command,user_id,database_id,connection_id,blocking_session_id,wait_type,wait_time,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_exec_requests

[DB-Monitor-mssql-mssql:execution:dm_exec_sessions]
mode = batch
description = mssql:execution:dm_exec_sessions
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_exec_sessions

[DB-Monitor-mssql-mssql:execution:dm_exec_trigger_stats]
mode = batch
description = mssql:execution:dm_exec_trigger_stats
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_exec_trigger_stats

[DB-Monitor-mssql-mssql:index:dm_db_index_physical_stats]
mode = batch
description = mssql:index:dm_db_index_physical_stats
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_db_index_physical_stats(NULL,NULL,NULL,NULL,NULL)

[DB-Monitor-mssql-mssql:index:dm_db_index_operational_stats]
mode = batch
description = mssql:index:dm_db_index_operational_stats
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_db_index_operational_stats(NULL,NULL,NULL,NULL)

[DB-Monitor-mssql-mssql:index:dm_db_index_usage_stats]
mode = batch
description = mssql:index:dm_db_index_usage_stats
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_db_index_usage_stats

[DB-Monitor-mssql-mssql:index:dm_db_missing_index_details]
mode = batch
description = mssql:index:dm_db_missing_index_details
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_db_missing_index_details

[DB-Monitor-mssql-mssql:index:dm_db_missing_index_groups]
mode = batch
description = mssql:index:dm_db_missing_index_groups
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_db_missing_index_groups

[DB-Monitor-mssql-mssql:index:dm_db_missing_index_group_stats]
mode = batch
description = mssql:index:dm_db_missing_index_group_stats
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_db_missing_index_group_stats

[DB-Monitor-mssql-mssql:mirroring:dm_db_mirroring_connections]
mode = batch
description = mssql:mirroring:dm_db_mirroring_connections
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_db_mirroring_connections

[DB-Monitor-mssql-mssql:mirroring:dm_db_mirroring_auto_page_repair]
mode = batch
description = mssql:mirroring:dm_db_mirroring_auto_page_repair
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_db_mirroring_auto_page_repair

[DB-Monitor-mssql-mssql:os:dm_os_sys_info]
mode = batch
description = mssql:os:dm_os_sys_info
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,DATEADD(s,((-1)*([ms_ticks]/1000)),GETDATE()) AS time_of_last_restart,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_os_sys_info

[DB-Monitor-mssql-mssql:os:dm_os_buffer_descriptors]
mode = batch
description = mssql:os:dm_os_buffer_descriptors
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT a.*,b.name,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_os_buffer_descriptors a JOIN sys.databases b ON a.database_id = b.database_id

[DB-Monitor-mssql-mssql:os:dm_os_performance_counters]
mode = batch
description = mssql:os:dm_os_performance_counters
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *, CONVERT(varchar(128),@@MAX_CONNECTIONS) AS max_connection, db_name() AS DatabaseName,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName FROM sys.dm_os_performance_counters

[DB-Monitor-mssql-mssql:replication:dm_repl_articles]
mode = batch
description = mssql:replication:dm_repl_articles
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_repl_articles

[DB-Monitor-mssql-mssql:replication:dm_repl_tranhash]
mode = batch
description = mssql:replication:dm_repl_tranhash
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_repl_tranhash

[DB-Monitor-mssql-mssql:replication:dm_repl_schemas]
mode = batch
description = mssql:replication:dm_repl_schemas
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_repl_schemas

[DB-Monitor-mssql-mssql:replication:dm_repl_traninfo]
mode = batch
description = mssql:replication:dm_repl_traninfo
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_repl_traninfo

[DB-Monitor-mssql-mssql:transaction:dm_tran_active_snapshot_database_transactions]
mode = batch
description = mssql:transaction:dm_tran_active_snapshot_database_transactions
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_tran_active_snapshot_database_transactions

[DB-Monitor-mssql-mssql:transaction:dm_tran_current_snapshot]
mode = batch
description = mssql:transaction:dm_tran_current_snapshot
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_tran_current_snapshot

[DB-Monitor-mssql-mssql:transaction:dm_tran_database_transactions]
mode = batch
description = mssql:transaction:dm_tran_database_transactions
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_tran_database_transactions

[DB-Monitor-mssql-mssql:transaction:dm_tran_session_transactions]
mode = batch
description = mssql:transaction:dm_tran_session_transactions
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_tran_session_transactions

[DB-Monitor-mssql-mssql:transaction:dm_tran_transactions_snapshot]
mode = batch
description = mssql:transaction:dm_tran_transactions_snapshot
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_tran_transactions_snapshot

[DB-Monitor-mssql-mssql:transaction:dm_tran_active_transactions]
mode = batch
description = mssql:transaction:dm_tran_active_transactions
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_tran_active_transactions

[DB-Monitor-mssql-mssql:transaction:dm_tran_current_transaction]
mode = batch
description = mssql:transaction:dm_tran_current_transaction
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_tran_current_transaction

[DB-Monitor-mssql-mssql:transaction:dm_tran_locks]
mode = batch
description = mssql:transaction:dm_tran_locks
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_tran_locks

[DB-Monitor-mssql-mssql:transaction:dm_tran_top_version_generators]
mode = batch
description = mssql:transaction:dm_tran_top_version_generators
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_tran_top_version_generators

[DB-Monitor-mssql-mssql:transaction:dm_tran_version_store]
mode = batch
description = mssql:transaction:dm_tran_version_store
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT *,CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.dm_tran_version_store

[DB-Monitor-mssql-mssql:table]
mode = batch
description = mssql:table
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT t.NAME AS TableName, t.modify_date AS ModifyTime, s.Name AS SchemaName, p.rows AS RowCounts, SUM(a.used_pages) * 8 AS TableSizeKB, CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.tables t INNER JOIN sys.indexes i ON t.OBJECT_ID = i.object_id INNER JOIN sys.partitions p ON i.object_id = p.OBJECT_ID AND i.index_id = p.index_id INNER JOIN sys.allocation_units a ON p.partition_id = a.container_id LEFT OUTER JOIN sys.schemas s ON t.schema_id = s.schema_id GROUP BY t.Name,t.modify_date, s.Name, p.Rows

[DB-Monitor-mssql-mssql:user]
mode = batch
description = mssql:user
interval = */5 * * * *
connection_type = mssql
input_type = metric
query = SELECT name, principal_id, type, type_desc, is_disabled, create_date, modify_date, CONVERT(varchar(128),SERVERPROPERTY('ServerName')) AS ServerName, db_name() AS DatabaseName FROM sys.sql_logins

[DB-Monitor-psql-psql:last:autovacuum]
mode = batch
description = postgresql:last:autovacuum
interval = */5 * * * *
connection_type = postgresql
input_type = metric
query = SELECT relname, last_vacuum, last_autovacuum FROM pg_stat_user_tables;

[DB-Monitor-psql-psql:LongRunningTransaction]
mode = batch
description = postgresql:LongRunningTransaction
interval = */5 * * * *
connection_type = postgresql
input_type = metric
query = SELECT xact_start, state, usename FROM pg_stat_activity;

[DB-Monitor-psql-psql:Gen_DB_Stat]
mode = batch
description = postgresql:Gen_DB_Stat
interval = */5 * * * *
connection_type = postgresql
input_type = metric
query = SELECT * FROM pg_stat_database;

[DB-Monitor-psql-psql:Gen_Tbl_Stat]
mode = batch
description = postgresql:Gen_Tbl_Stat
interval = */5 * * * *
connection_type = postgresql
input_type = metric
query = SELECT * FROM pg_stat_user_tables;

[DB-Monitor-psql-psql:Stat_Activity]
mode = batch
description = postgresql:Stat_Activity
interval = */5 * * * *
connection_type = postgresql
input_type = metric
query = select * from pg_stat_activity

[DB-Monitor-db2-db2:Workload_Statistics]
mode = batch
description = db2:Workload_Statistics
interval = */5 * * * *
connection_type = db2
input_type = metric
query = SELECT * FROM TABLE(MON_GET_WORKLOAD('',-2)) AS t

[DB-Monitor-db2-db2:CurrentWork_SQL_Queries]
mode = batch
description = db2:CurrentWork_SQL_Queries
interval = */5 * * * *
connection_type = db2
input_type = metric
query = SELECT * from SYSIBMADM.MON_CURRENT_SQL

[DB-Monitor-db2-db2:Snapshot_View]
mode = batch
description = db2:Snapshot_View
interval = */5 * * * *
connection_type = db2
input_type = metric
query = select * from sysibmadm.snapdb

[DB-Monitor-db2-db2:Snapshot_MemoryPool]
mode = batch
description = db2:Snapshot_MemoryPool
interval = */5 * * * *
connection_type = db2
input_type = metric
query = select * from SYSIBMADM.SNAPDB_MEMORY_POOL

[DB-Monitor-db2-db2:ClientConnectionInformation]
mode = batch
description = db2:ClientConnectionInformation
interval = */5 * * * *
connection_type = db2
input_type = metric
query = SELECT * FROM TABLE(MON_GET_CONNECTION(cast(NULL as bigint),-2)) AS t

[DB-Monitor-db2-db2:Workload_Activities]
mode = batch
description = db2:Workload_Activities
interval = */5 * * * *
connection_type = db2
input_type = metric
query = SELECT * FROM TABLE(WLM_GET_WORKLOAD_OCCURRENCE_ACTIVITIES_V97(cast(NULL as bigint), -1)) AS T

[DB-Monitor-oracle-oracle:sysstat]
mode = batch
description = oracle:sysstat
interval = */1 * * * *
connection_type = oracle
input_type = metric
query = SELECT * from v$sysstat

[DB-Monitor-oracle-oracle:sysmetric]
mode = batch
description = oracle:sysmetric
interval = */1 * * * *
connection_type = oracle
input_type = metric
query = SELECT * from v$sysmetric

[DB-Monitor-sybase-UpDown]
mode = batch
description = UpDown
interval = */5 * * * *
connection_type = sybase
input_type = metric
query = Select @@servername

[DB-Monitor-sybase-UsersConnected_OpenSessions]
mode = batch
description = UsersConnected_OpenSessions
interval = */5 * * * *
connection_type = sybase
input_type = metric
query = select count (*) from master.. sysprocesses where fid = 0) > (select value * 0.9 from sysconfigures where comment = 'number of user connections')

[DB-Monitor-sybase-Engines_Offline]
mode = batch
description = Engines_Offline
interval = */5 * * * *
connection_type = sybase
input_type = metric
query = select count(*) from master.. sysengines where status='offline'

[DB-Monitor-sybase-BlockedProcesses]
mode = batch
description = BlockedProcesses
interval = */5 * * * *
connection_type = sybase
input_type = metric
query = select * from master.. sysprocesses where blocked<>0 and time_blocked> 3600
